#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!csharp

#r "../ShaderNote/bin/Debug/net7.0/ShaderNote.dll"
#r "../ShaderNote.ModelLoaders/bin/Debug/net7.0/ShaderNote.ModelLoaders.dll"
#r "nuget:Vortice.Direct3D11"
#r "nuget:Vortice.D3DCompiler"
#r "nuget:SixLabors.ImageSharp"

#!csharp

using Microsoft.DotNet.Interactive.Formatting;
using ShaderNote;

Formatter.Register<RenderRecord>((w)=>
{
    var result = w.Render();
    string html = result.GetHtml();
    result.Dispose();
    return html;
},HtmlFormatter.MimeType);

#!csharp

var texturePath = "../../kizunaai/";
var pmxModelPath="../../kizunaai/kizunaai.pmx";

#!csharp

using ShaderNote;
NoteDevice noteDevice = new NoteDevice();

#!csharp

using System.Numerics;
using ShaderNote.ModelLoaders;
PMXFormat pmx= PMXFormat.Load(pmxModelPath);

var positions = pmx.Vertices.Select(u=>u.Coordinate).ToArray();
var normals = pmx.Vertices.Select(u=>u.Normal).ToArray();
var uvs = pmx.Vertices.Select(u=>u.UvCoordinate).ToArray();
var indices = pmx.TriangleIndexs;
var materials=pmx.Materials;
var textures=pmx.Textures;

#!csharp

using System.Numerics;
using Vortice.DXGI;
using Vortice.Direct3D11;
using System.IO;
public struct ShaderData
{
    public Matrix4x4 MVP;
    public Matrix4x4 Shadow;
    public Vector4 LightColor;
    public Vector3 LightDir;
}

#!csharp

var lightDir=Vector3.Normalize(new Vector3(0.05f,1,-0.3f));
var shadowCenter=new Vector3(0,10,0);
var shadowMatrix= Matrix4x4.CreateLookAt(lightDir*25+shadowCenter,shadowCenter, Vector3.UnitY)*
    Matrix4x4.CreateOrthographic(16,16,0,50);

var vmat = Matrix4x4.CreateLookAt(new Vector3(0,15,-10),new Vector3(0,15,0), Vector3.UnitY);
var pmat = Matrix4x4.CreatePerspectiveFieldOfView(60.0f/180.0f*MathF.PI,1.0f,0.5f,100.0f);
var vpmat=Matrix4x4.Multiply(vmat,pmat);
Matrix4x4.Invert(vpmat,out Matrix4x4 inverseVP);

ShaderData constantBuffer=new ShaderData
{
    MVP=Matrix4x4.Transpose(vpmat),
    Shadow=Matrix4x4.Transpose(shadowMatrix),
    LightColor = new Vector4(1,1,1,1),
    LightDir = lightDir,
};

#!markdown

## Shadow

#!csharp

var shadowRender = noteDevice.GetRecord()
    .WithVertexShader("Shaders/vs_shadow.hlsl")
    .WithIndexBuffer(data: indices)
    .WithVertexBuffer("POSITION0", 12, data: positions)
    .WithConstantBuffer(0,Matrix4x4.Transpose(shadowMatrix))
    .WithMRT()
    .WithDepth()
    .WithDrawIndexed(indices.Length);

shadowRender

#!markdown

## GBuffer

#!csharp

var render = noteDevice.GetRecord()
    .WithVertexShader("Shaders/vs_3d_02.hlsl")
    .WithPixelShader("Shaders/ps_3d_deferred_gbuffer.hlsl")
    .WithIndexBuffer(data: indices)
    .WithVertexBuffer("POSITION0", 12, data: positions)
    .WithVertexBuffer("NORMAL0", 12, data: normals)
    .WithVertexBuffer("TEXCOORD0", 8, data: uvs)
    .WithSampler(0)
    .WithConstantBuffer(0,constantBuffer)
    .WithBlendState(BlendDescription.AlphaBlend)
    .WithImage(1,shadowRender.Render());

foreach (var material in materials)
{
    render = render
        .WithImage(0,file:Path.Combine(texturePath,textures[material.TextureIndex].TexturePath))
        .WithDrawIndexed(material.TriangeIndexNum,startIndexLocation:material.TriangeIndexStartNum);
}
render=render
    .WithMRT(Format.R8G8B8A8_UNorm,Format.R8G8B8A8_UNorm)
    .WithDepth();

//View Result
render

#!markdown

## Final

#!csharp

public struct ShaderData2
{
    public Matrix4x4 VP;
    public Matrix4x4 inverseVP;
    public Matrix4x4 Shadow;
    public Vector4 LightColor;
    public Vector3 LightDir;
}
ShaderData2 finalRenderConstantBuffer=new ShaderData2
{
    VP=Matrix4x4.Transpose(vpmat),
    inverseVP=Matrix4x4.Transpose(inverseVP),
    Shadow=Matrix4x4.Transpose(shadowMatrix),
    LightColor = new Vector4(1,1,1,1),
    LightDir = lightDir,
};

var gbuffer= render.Render();

var finalRender=noteDevice.GetRecord()
    .WithVertexShader("Shaders/vs_screen.hlsl")
    .WithPixelShader("Shaders/ps_3d_deferred_final.hlsl")
    .WithIndexBuffer(data: new ushort[] { 0, 2, 1, 1, 2, 3 })
    .WithVertexBuffer("POSITION0", 12, data: new Vector3[]
    {
        new(-1,-1,0),
        new(1,-1,0),
        new(-1,1,0),
        new(1,1,0),
    })
    .WithVertexBuffer("TEXCOORD0", 8, data: new Vector2[]
    {
        new(0,1),
        new(1,1),
        new(0,0),
        new(1,0),
    })
    .WithSampler(0)
    .WithConstantBuffer(0,finalRenderConstantBuffer)
    .WithImage(0,gbuffer,0)
    .WithImage(1,gbuffer,1)
    .WithImage(2,gbuffer)
    .WithImage(3,shadowRender.Render())
    .WithDrawIndexed(6);

finalRender
